#!/bin/bash

# Check if docker and docker-compose are installed
command -v docker >/dev/null 2>&1 || { echo "docker is not installed. Aborting." >&2; exit 1; }
command -v docker-compose >/dev/null 2>&1 || { echo "docker-compose is not installed. Aborting." >&2; exit 1; }

package_dir="Packages/Libraries/shel/dockerflow"
config_dir="${package_dir}/Configuration"
export HOST_USER_ID="${UID}"

action=$1

# Generate project name from folder name
projectname=${PWD##*/}
projectname=`echo ${projectname// /_}`
projectname=`echo ${projectname} | tr '[A-Z]' '[a-z]'`

# Wrap docker-compose command to use config from package
wrapped_command="docker-compose -p \"${projectname}\" -f ${package_dir}/docker-compose.yml"

# Use the projects folder name as servername
DOCKER_FLOW_SERVERNAME=${projectname}

# Default port for dockerflow
DOCKER_FLOW_PORT=8080

# Use Development context if Flow Context is not set
DOCKER_FLOW_CONTEXT=${FLOW_CONTEXT:=Development}

# Replace the markers in the merge config file
sed -e "s/DOCKER_FLOW_SERVERNAME/test.${DOCKER_FLOW_SERVERNAME}/g;s/DOCKER_FLOW_CONTEXT/${DOCKER_FLOW_CONTEXT}\/Testing/g" ${config_dir}/Web/nginx_vhost.conf > ${config_dir}/Web/nginx_vhost_merged.conf
sed -e "s/DOCKER_FLOW_SERVERNAME/${DOCKER_FLOW_SERVERNAME} *.${DOCKER_FLOW_SERVERNAME}/g;s/DOCKER_FLOW_CONTEXT/${DOCKER_FLOW_CONTEXT}/g" ${config_dir}/Web/nginx_vhost.conf >> ${config_dir}/Web/nginx_vhost_merged.conf

# Make sure all entrypoint scripts are executable
chmod +x ${package_dir}/Scripts/EntryPoint/*.sh

# Create placeholder for storing web ip
touch ${config_dir}/Web/ip_address.txt

echo "####"
echo "### Project name    : ${projectname}"
echo "### FLOW_CONTEXT    : ${DOCKER_FLOW_CONTEXT}"
echo "### Testing context : ${DOCKER_FLOW_CONTEXT}/Testing"
echo "###"
echo "### DockerFlow is now running action '${action}'"
echo "####"

# Wrap docker-compose command to use config from package, passing Flow context on run action
if [ "$action" = "run" ]; then
	${wrapped_command} $1 --rm -e FLOW_CONTEXT=${DOCKER_FLOW_CONTEXT} ${*:2}
else
	${wrapped_command} $*
fi

if [ "$action" = "up" ]; then
	# Get ip address of web container, store in ip_address.txt file and send it to app container
	${wrapped_command} run --rm -e PROJECT_NAME=${projectname} web /entrypoint.sh
	${wrapped_command} run --rm app /entrypoint.sh

	# Print information about running app container
	used_port=`${wrapped_command} port web ${DOCKER_FLOW_PORT} | sed 's/^.*\:\([0-9]*\).*$/\1/g'`
	echo "####"
	echo "### Done! Your app is running here  : ${projectname}:${used_port}"
	echo "### Testing context is running here : test.${projectname}:${used_port}"
	echo "####"
fi
